// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2022 17:38:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Sum4bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Sum4bit_vlg_sample_tst(
	Bit_0,
	Bit_1,
	Bit_2,
	Bit_3,
	Clear,
	Load,
	SUMAoRESTA,
	Transfer,
	sampler_tx
);
input  Bit_0;
input  Bit_1;
input  Bit_2;
input  Bit_3;
input  Clear;
input  Load;
input  SUMAoRESTA;
input  Transfer;
output sampler_tx;

reg sample;
time current_time;
always @(Bit_0 or Bit_1 or Bit_2 or Bit_3 or Clear or Load or SUMAoRESTA or Transfer)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Sum4bit_vlg_check_tst (
	Carry,
	Overflow,
	Salida_0,
	Salida_1,
	Salida_2,
	Salida_3,
	Signo,
	Zero,
	sampler_rx
);
input  Carry;
input  Overflow;
input  Salida_0;
input  Salida_1;
input  Salida_2;
input  Salida_3;
input  Signo;
input  Zero;
input sampler_rx;

reg  Carry_expected;
reg  Overflow_expected;
reg  Salida_0_expected;
reg  Salida_1_expected;
reg  Salida_2_expected;
reg  Salida_3_expected;
reg  Signo_expected;
reg  Zero_expected;

reg  Carry_prev;
reg  Overflow_prev;
reg  Salida_0_prev;
reg  Salida_1_prev;
reg  Salida_2_prev;
reg  Salida_3_prev;
reg  Signo_prev;
reg  Zero_prev;

reg  Carry_expected_prev;
reg  Overflow_expected_prev;
reg  Salida_0_expected_prev;
reg  Salida_1_expected_prev;
reg  Salida_2_expected_prev;
reg  Salida_3_expected_prev;
reg  Signo_expected_prev;
reg  Zero_expected_prev;

reg  last_Carry_exp;
reg  last_Overflow_exp;
reg  last_Salida_0_exp;
reg  last_Salida_1_exp;
reg  last_Salida_2_exp;
reg  last_Salida_3_exp;
reg  last_Signo_exp;
reg  last_Zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	Carry_prev = Carry;
	Overflow_prev = Overflow;
	Salida_0_prev = Salida_0;
	Salida_1_prev = Salida_1;
	Salida_2_prev = Salida_2;
	Salida_3_prev = Salida_3;
	Signo_prev = Signo;
	Zero_prev = Zero;
end

// update expected /o prevs

always @(trigger)
begin
	Carry_expected_prev = Carry_expected;
	Overflow_expected_prev = Overflow_expected;
	Salida_0_expected_prev = Salida_0_expected;
	Salida_1_expected_prev = Salida_1_expected;
	Salida_2_expected_prev = Salida_2_expected;
	Salida_3_expected_prev = Salida_3_expected;
	Signo_expected_prev = Signo_expected;
	Zero_expected_prev = Zero_expected;
end



// expected Salida_0
initial
begin
	Salida_0_expected = 1'bX;
end 

// expected Salida_1
initial
begin
	Salida_1_expected = 1'bX;
end 

// expected Salida_2
initial
begin
	Salida_2_expected = 1'bX;
end 

// expected Salida_3
initial
begin
	Salida_3_expected = 1'bX;
end 

// expected Carry
initial
begin
	Carry_expected = 1'bX;
end 

// expected Overflow
initial
begin
	Overflow_expected = 1'bX;
end 

// expected Signo
initial
begin
	Signo_expected = 1'bX;
end 

// expected Zero
initial
begin
	Zero_expected = 1'bX;
	Zero_expected = #500000 1'b1;
end 
// generate trigger
always @(Carry_expected or Carry or Overflow_expected or Overflow or Salida_0_expected or Salida_0 or Salida_1_expected or Salida_1 or Salida_2_expected or Salida_2 or Salida_3_expected or Salida_3 or Signo_expected or Signo or Zero_expected or Zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Carry = %b | expected Overflow = %b | expected Salida_0 = %b | expected Salida_1 = %b | expected Salida_2 = %b | expected Salida_3 = %b | expected Signo = %b | expected Zero = %b | ",Carry_expected_prev,Overflow_expected_prev,Salida_0_expected_prev,Salida_1_expected_prev,Salida_2_expected_prev,Salida_3_expected_prev,Signo_expected_prev,Zero_expected_prev);
	$display("| real Carry = %b | real Overflow = %b | real Salida_0 = %b | real Salida_1 = %b | real Salida_2 = %b | real Salida_3 = %b | real Signo = %b | real Zero = %b | ",Carry_prev,Overflow_prev,Salida_0_prev,Salida_1_prev,Salida_2_prev,Salida_3_prev,Signo_prev,Zero_prev);
`endif
	if (
		( Carry_expected_prev !== 1'bx ) && ( Carry_prev !== Carry_expected_prev )
		&& ((Carry_expected_prev !== last_Carry_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Carry :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Carry_expected_prev);
		$display ("     Real value = %b", Carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Carry_exp = Carry_expected_prev;
	end
	if (
		( Overflow_expected_prev !== 1'bx ) && ( Overflow_prev !== Overflow_expected_prev )
		&& ((Overflow_expected_prev !== last_Overflow_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Overflow_expected_prev);
		$display ("     Real value = %b", Overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Overflow_exp = Overflow_expected_prev;
	end
	if (
		( Salida_0_expected_prev !== 1'bx ) && ( Salida_0_prev !== Salida_0_expected_prev )
		&& ((Salida_0_expected_prev !== last_Salida_0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Salida_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Salida_0_expected_prev);
		$display ("     Real value = %b", Salida_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Salida_0_exp = Salida_0_expected_prev;
	end
	if (
		( Salida_1_expected_prev !== 1'bx ) && ( Salida_1_prev !== Salida_1_expected_prev )
		&& ((Salida_1_expected_prev !== last_Salida_1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Salida_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Salida_1_expected_prev);
		$display ("     Real value = %b", Salida_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Salida_1_exp = Salida_1_expected_prev;
	end
	if (
		( Salida_2_expected_prev !== 1'bx ) && ( Salida_2_prev !== Salida_2_expected_prev )
		&& ((Salida_2_expected_prev !== last_Salida_2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Salida_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Salida_2_expected_prev);
		$display ("     Real value = %b", Salida_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Salida_2_exp = Salida_2_expected_prev;
	end
	if (
		( Salida_3_expected_prev !== 1'bx ) && ( Salida_3_prev !== Salida_3_expected_prev )
		&& ((Salida_3_expected_prev !== last_Salida_3_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Salida_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Salida_3_expected_prev);
		$display ("     Real value = %b", Salida_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Salida_3_exp = Salida_3_expected_prev;
	end
	if (
		( Signo_expected_prev !== 1'bx ) && ( Signo_prev !== Signo_expected_prev )
		&& ((Signo_expected_prev !== last_Signo_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Signo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Signo_expected_prev);
		$display ("     Real value = %b", Signo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Signo_exp = Signo_expected_prev;
	end
	if (
		( Zero_expected_prev !== 1'bx ) && ( Zero_prev !== Zero_expected_prev )
		&& ((Zero_expected_prev !== last_Zero_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Zero_expected_prev);
		$display ("     Real value = %b", Zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Zero_exp = Zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Sum4bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Bit_0;
reg Bit_1;
reg Bit_2;
reg Bit_3;
reg Clear;
reg Load;
reg SUMAoRESTA;
reg Transfer;
// wires                                               
wire Carry;
wire Overflow;
wire Salida_0;
wire Salida_1;
wire Salida_2;
wire Salida_3;
wire Signo;
wire Zero;

wire sampler;                             

// assign statements (if any)                          
Sum4bit i1 (
// port map - connection between master ports and signals/registers   
	.Bit_0(Bit_0),
	.Bit_1(Bit_1),
	.Bit_2(Bit_2),
	.Bit_3(Bit_3),
	.Carry(Carry),
	.Clear(Clear),
	.Load(Load),
	.Overflow(Overflow),
	.Salida_0(Salida_0),
	.Salida_1(Salida_1),
	.Salida_2(Salida_2),
	.Salida_3(Salida_3),
	.Signo(Signo),
	.SUMAoRESTA(SUMAoRESTA),
	.Transfer(Transfer),
	.Zero(Zero)
);

// Bit_0
initial
begin
	Bit_0 = 1'b1;
	Bit_0 = #150000 1'b0;
	Bit_0 = #30000 1'b1;
	Bit_0 = #60000 1'b0;
	Bit_0 = #60000 1'b1;
	Bit_0 = #60000 1'b0;
	Bit_0 = #30000 1'b1;
	Bit_0 = #90000 1'b0;
	Bit_0 = #120000 1'b1;
	Bit_0 = #30000 1'b0;
	Bit_0 = #180000 1'b1;
end 

// Bit_1
initial
begin
	Bit_1 = 1'b0;
	Bit_1 = #80000 1'b1;
	Bit_1 = #20000 1'b0;
	Bit_1 = #20000 1'b1;
	Bit_1 = #20000 1'b0;
	Bit_1 = #40000 1'b1;
	Bit_1 = #40000 1'b0;
	Bit_1 = #100000 1'b1;
	Bit_1 = #80000 1'b0;
	Bit_1 = #40000 1'b1;
	Bit_1 = #40000 1'b0;
	Bit_1 = #20000 1'b1;
	Bit_1 = #40000 1'b0;
	Bit_1 = #60000 1'b1;
	Bit_1 = #20000 1'b0;
	Bit_1 = #40000 1'b1;
	Bit_1 = #20000 1'b0;
	Bit_1 = #20000 1'b1;
	Bit_1 = #40000 1'b0;
	Bit_1 = #20000 1'b1;
	Bit_1 = #20000 1'b0;
	Bit_1 = #40000 1'b1;
	Bit_1 = #20000 1'b0;
	Bit_1 = #20000 1'b1;
	Bit_1 = #20000 1'b0;
	Bit_1 = #20000 1'b1;
	Bit_1 = #60000 1'b0;
	Bit_1 = #20000 1'b1;
end 

// Bit_2
initial
begin
	Bit_2 = 1'b1;
	Bit_2 = #25000 1'b0;
	Bit_2 = #50000 1'b1;
	Bit_2 = #25000 1'b0;
	Bit_2 = #50000 1'b1;
	Bit_2 = #100000 1'b0;
	Bit_2 = #50000 1'b1;
	Bit_2 = #50000 1'b0;
	Bit_2 = #50000 1'b1;
	Bit_2 = #50000 1'b0;
	Bit_2 = #100000 1'b1;
	Bit_2 = #25000 1'b0;
	Bit_2 = #25000 1'b1;
	Bit_2 = #25000 1'b0;
	Bit_2 = #25000 1'b1;
	Bit_2 = #25000 1'b0;
	Bit_2 = #75000 1'b1;
	Bit_2 = #25000 1'b0;
	Bit_2 = #25000 1'b1;
	Bit_2 = #75000 1'b0;
	Bit_2 = #50000 1'b1;
end 

// Bit_3
initial
begin
	Bit_3 = 1'b0;
	Bit_3 = #160000 1'b1;
	Bit_3 = #40000 1'b0;
	Bit_3 = #80000 1'b1;
	Bit_3 = #80000 1'b0;
	Bit_3 = #80000 1'b1;
	Bit_3 = #160000 1'b0;
	Bit_3 = #40000 1'b1;
	Bit_3 = #40000 1'b0;
	Bit_3 = #80000 1'b1;
	Bit_3 = #160000 1'b0;
end 

// Clear
initial
begin
	Clear = 1'b0;
	Clear = #10000 1'b1;
end 

// Load
always
begin
	Load = 1'b0;
	Load = #10000 1'b1;
	#10000;
end 

// Transfer
initial
begin
	Transfer = 1'b0;
	Transfer = #20000 1'b1;
	# 10000;
	repeat(24)
	begin
		Transfer = 1'b0;
		Transfer = #10000 1'b1;
		# 10000;
	end
	repeat(24)
	begin
		Transfer = 1'b0;
		Transfer = #10000 1'b1;
		# 10000;
	end
	Transfer = 1'b0;
end 

// SUMAoRESTA
initial
begin
	SUMAoRESTA = 1'b0;
	SUMAoRESTA = #500000 1'b1;
end 

Sum4bit_vlg_sample_tst tb_sample (
	.Bit_0(Bit_0),
	.Bit_1(Bit_1),
	.Bit_2(Bit_2),
	.Bit_3(Bit_3),
	.Clear(Clear),
	.Load(Load),
	.SUMAoRESTA(SUMAoRESTA),
	.Transfer(Transfer),
	.sampler_tx(sampler)
);

Sum4bit_vlg_check_tst tb_out(
	.Carry(Carry),
	.Overflow(Overflow),
	.Salida_0(Salida_0),
	.Salida_1(Salida_1),
	.Salida_2(Salida_2),
	.Salida_3(Salida_3),
	.Signo(Signo),
	.Zero(Zero),
	.sampler_rx(sampler)
);
endmodule

